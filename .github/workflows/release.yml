# MIT License
#
# Copyright (c) 2025 MickaÃ«l CANOUIL
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-version:
    runs-on: ubuntu-latest

    env:
      BRANCH: ci/bump-version
      COMMIT: "ci: bump version for release :rocket:"
      BUMP_TYPE: ${{ inputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version }}
      bump_type: ${{ steps.version.outputs.bump_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build action
        run: npm run build

      - name: Determine version bump
        id: version
        run: |
          CURRENT_VERSION=$(grep '"version":' package.json | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          echo "Current version: ${CURRENT_VERSION}"

          MAJOR=$(echo ${CURRENT_VERSION} | cut -d. -f1)
          MINOR=$(echo ${CURRENT_VERSION} | cut -d. -f2)
          PATCH=$(echo ${CURRENT_VERSION} | cut -d. -f3)

          case "${BUMP_TYPE}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> "${GITHUB_OUTPUT}"
          echo "bump_type=${BUMP_TYPE}" >> "${GITHUB_OUTPUT}"

      - name: Update version files
        id: update-version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.version }}
        run: |
          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git branch -D "${BRANCH}"
            git push origin --delete "${BRANCH}"
          fi
          git checkout -b "${BRANCH}"

          DATE=$(date +%Y-%m-%d)

          if ! grep -q "^## Unreleased$" CHANGELOG.md; then
            echo "Error: No '## Unreleased' section found in CHANGELOG.md"
            exit 1
          fi

          # Update package.json
          npm version ${NEW_VERSION} --no-git-tag-version

          # Update CITATION.cff
          sed -i "s/^version:.*/version: ${NEW_VERSION}/" CITATION.cff
          sed -i "s/^date-released:.*/date-released: \"${DATE}\"/" CITATION.cff

          # Update CHANGELOG.md: replace "Unreleased" with version and date
          sed -i "s/^## Unreleased$/## ${NEW_VERSION} (${DATE})/" CHANGELOG.md

          git add package.json package-lock.json CITATION.cff CHANGELOG.md dist/
          git commit -m "${COMMIT}" || echo "No changes to commit"
          git push --force origin ${BRANCH} || echo "No changes to push"

          sleep 5
          gh pr create --fill-first --base "${GITHUB_REF_NAME}" --head "${BRANCH}" --label "Type: CI/CD :robot:"
          sleep 5
          gh pr merge --auto --squash --delete-branch
          sleep 5

  release:
    runs-on: ubuntu-latest

    needs: bump-version

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Update branch
        run: |
          git fetch --all
          git checkout "${GITHUB_REF_NAME}"
          git pull origin "${GITHUB_REF_NAME}"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ needs.bump-version.outputs.version }}
        run: |
          awk -v version="^## ${NEW_VERSION}.*" '
            $0 ~ version {flag=1; next}
            /^## / && flag {flag=0}
            flag
          ' CHANGELOG.md >"CHANGELOG-${NEW_VERSION}.md"

          gh release create "v${NEW_VERSION}" \
            --title "v${NEW_VERSION}" \
            --notes-file "CHANGELOG-${NEW_VERSION}.md"

      - name: Update major version tag
        env:
          NEW_VERSION: ${{ needs.bump-version.outputs.version }}
        run: |
          MAJOR_VERSION=$(echo ${NEW_VERSION} | cut -d. -f1)
          git tag -f "v${MAJOR_VERSION}"
          git push -f origin "v${MAJOR_VERSION}"

      - name: Summary
        env:
          NEW_VERSION: ${{ needs.bump-version.outputs.version }}
          BUMP_TYPE: ${{ needs.bump-version.outputs.bump_type }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          MAJOR_VERSION=$(echo ${NEW_VERSION} | cut -d. -f1)
          cat >> "${GITHUB_STEP_SUMMARY}" <<EOF
          # Release Summary

          **Version:** v${NEW_VERSION}
          **Bump Type:** ${BUMP_TYPE}
          **Major Tag:** v${MAJOR_VERSION}

          ## Changes

          - Updated \`package.json\` and \`package-lock.json\` to version ${NEW_VERSION}
          - Updated \`CITATION.cff\` with new version and release date
          - Updated \`CHANGELOG.md\` to reflect version ${NEW_VERSION}
          - Created GitHub release: [v${NEW_VERSION}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${NEW_VERSION})
          - Updated major version tag: v${MAJOR_VERSION}
          EOF
